================================================================================
INTRODUCTION                                                    *nvim-hurl.nvim*

nvim-hurl.nvim is a plugin that adds various utilities to improve your workflow
when using `.hurl` files.

                                                                *:HurlYank*
:HurlYank
Run a hurl file, or a range, and yank the results into the `"*` register.

                                                                *:HurlRun*
:HurlRun
Run a hurl file, or a range, and view the results in a split window scratch file.

The hurl command will be printed to the command line so you know what command
is being run under the hood.
                                                                *:HurlRunVerbose*
:HurlRunVerbose
Run a hurl file, or a range, and view the result and the results of the hurl 
`--verbose` option in two seperate scratch files.

                                                                *:Hurlsvf*
:Hurlsvf
Hurl [s]et [v]ariables [f]iles. This command will set the variables file for a
project.

It will generate a file, `.hurl_variable_location`, to keep track of your 
variables. If your using git, consider adding this file to your `.gitignore` file 
or your exclude file with `echo '.hurl_variable_location' >> .git/info/exclude`

                                                                *:Hurlsv*
:Hurlsv
Hurl [s]et [v]ariable. Sets a temporary variable, it is the equivelant to the
command line `--variable` option. It accepts exactly two arguments, the name
of the variable and the variable. `:Hurlsv name value` is equivelant to
`--variable name=value` from the command line.

NOTE: These values will not persist after your session ends.
                                                                *:Hurlsvr*
:Hurlsvr
Hurl [s]et [v]ariable from [register]. Sets a temporary variable from the register.
It accepts the register as an argument and parses the contents of the register to
find the key and value.

The contents must be in json format or a partial json format, for example: {"key": "value"}
will set the hurl variable to `--variable key=variable`. If the contents are only
partial for example "key": "value" it will add the curly braces to make it valid json.

NOTE: only scalar values are supported, so nested objects or arrays will not be parsed.
If no key value pairs are found or if the JSON is not valid no values will be set.

                                                                *:Hurlvc*
:Hurlvc
Hurl [v]ariables [c]lear. Clear all temporary variables set via `:Hurlsv`.

                                                                *:CurlGo*
:CurlGo
Make a simple GET request, reusing the headers of the previous request. To
prevent reuse of previous headers, use `:CurlGo {url} noreuse`.

The curl command will be printed to the command line so you know what command
is being run under the hood.

                                                                *:CurlGoFromCursor*
:CurlGoFromCursor
Run `:CurlGo` running the but using the url directly under the cursor.

NOTE: Will reuse headers unless `noreuse` option is passed to it.

